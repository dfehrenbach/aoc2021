(ns aoc2021.day19.core
  (:require [clojure.string :as string]
            [clojure.set :as set]
            [clojure.core.matrix :as matrix]))

(defn read-point [s]
  (mapv read-string (string/split s #",")))

(defn split-scanners [lines]
  (loop [scanners []
         lines lines]
    (if (empty? lines) scanners
        (let [[scanner-text unread-lines] (split-with (comp not empty?) lines)
              scanner-points (mapv read-point (drop 1 scanner-text))]
          (recur (conj scanners scanner-points) (drop 1 unread-lines))))))

(def input-test
  (->> "src/aoc2021/day19/input-test.txt"
       slurp
       string/split-lines
       split-scanners))

(def input1
  (->> "src/aoc2021/day19/input1.txt"
       slurp
       string/split-lines
       split-scanners))

(defn flip [n] (* -1 n))

(defn rotate90
  ([point] (rotate90 1 point))
  ([n point]
   (letfn [(rotate [[x y z]] [y (flip x) z])]
     (first (drop n (iterate rotate point))))))

(defn upside-down [[x y z]]
  [x (flip y) (flip z)])

(defn transpose [m]
  (apply mapv vector m))

(defn plane-rotation
  "for a single plane, gives 8 rotations"
  [point]
  [point
   (rotate90 1 point)
   (rotate90 2 point)
   (rotate90 3 point)
   (upside-down point)
   (upside-down (rotate90 1 point))
   (upside-down (rotate90 2 point))
   (upside-down (rotate90 3 point))])

(defn all-orientations [[x y z :as point]]
  (vec (concat (plane-rotation point)   ;; starting plane
               (plane-rotation [y z x]) ;; rotate plane
               (plane-rotation [z x y]) ;; rotate plane again
               )))

(defn orientation->points-set [points]
  (mapv set (transpose (mapv all-orientations points))))

(defn shift-for-overlap [overlap-n point-set-a point-set-b]
  (ffirst (filter (comp (partial <= overlap-n) val)
                  (frequencies (for [a point-set-a
                                     b point-set-b]
                                 (map - a b))))))

(defn overlapping-orientation [scanned-space scanner]
  (reduce (fn [_ point-set]
            (when-let [shift (shift-for-overlap 12 (set scanned-space) point-set)]
              (reduced [shift point-set])))
          nil (orientation->points-set scanner)))

(defn shift-point-set [shift point-set]
  (set (map (partial matrix/add shift) point-set)))

(defn overlay-scanners [scanners]
  (loop
   [scanned-space (set (first scanners))
    remaining-scanners (rest scanners)
    skipped-scanners (clojure.lang.PersistentQueue/EMPTY)
    scanner-locations [[0 0 0]]]
    (if (and (empty? remaining-scanners) (empty? skipped-scanners)) {:probes scanned-space :scanners scanner-locations}
        (if (empty? remaining-scanners)
          (recur
           scanned-space
           (conj remaining-scanners (peek skipped-scanners))
           (pop skipped-scanners)
           scanner-locations)
          (let [next-scanner (first remaining-scanners)]
            (if-let [[shift oriented-point-set] (overlapping-orientation scanned-space next-scanner)]
              (recur
               (set/union scanned-space (shift-point-set shift oriented-point-set))
               (rest remaining-scanners)
               skipped-scanners
               (conj scanner-locations shift))
              (recur
               scanned-space
               (rest remaining-scanners)
               (conj skipped-scanners next-scanner)
               scanner-locations)))))))

(defn part1 [input]
  (count (:probes (overlay-scanners input))))

(defn manhatten-distance [p1 p2]
  (reduce + (map #(Math/abs %) (matrix/sub p1 p2))))

(defn part2 [input]
  (let [found-scanners (:scanners (overlay-scanners input))]
    (apply max (for [a found-scanners
                     b (remove #{a} found-scanners)]
                 (manhatten-distance a b)))))

(comment

  (plane-rotation [1 2 3])
;; => [[1 2 3] [2 -1 3] [-1 -2 3] [-2 1 3] [1 -2 -3] [2 1 -3] [-1 2 -3] [-2 -1 -3]]

  (all-orientations [1 2 3])
  ;; => ([1 2 3] [2 -1 3] [-1 -2 3] [-2 1 3] [1 -2 -3] [2 1 -3] [-1 2 -3] [-2 -1 -3] [1 3 2] [3 -1 2] [-1 -3 2] [-3 1 2] [1 -3 -2] [3 1 -2] [-1 3 -2] [-3 -1 -2] [3 2 1] [2 -3 1] [-3 -2 1] [-2 3 1] [3 -2 -1] [2 3 -1] [-3 2 -1] [-2 -3 -1])

  (orientation->points-set (first input-test))
  ;; => [#{[455 729 728] [-618 -824 -621] [630 319 -379] [-789 900 -551] [-876 649 763] [7 -33 -71] [564 392 -477] [-661 -816 -575] [-584 868 -557] [390 -675 -793] [-345 -311 381] [404 -588 -901] [-892 524 684] [443 580 662] [553 345 -567] [528 -643 409] [-537 -823 -458] [474 580 667] [-485 -357 347] [423 -701 434] [459 -707 401] [-689 845 -530] [544 -627 -890] [-838 591 734] [-447 -329 318]} #{[649 876 763] [591 838 734] [392 -564 -477] [-627 -544 -890] [-824 618 -621] [-311 345 381] [-701 -423 434] [868 584 -557] [-707 -459 401] [900 789 -551] [-329 447 318] [-357 485 347] [729 -455 728] [524 892 684] [-823 537 -458] [845 689 -530] [580 -474 667] [345 -553 -567] [319 -630 -379] [-675 -390 -793] [580 -443 662] [-643 -528 409] [-816 661 -575] [-33 -7 -71] [-588 -404 -901]} #{[-553 -345 -567] [838 -591 734] [345 311 381] [-459 707 401] [661 816 -575] [-404 588 -901] [-564 -392 -477] [-423 701 434] [-544 627 -890] [892 -524 684] [485 357 347] [-630 -319 -379] [447 329 318] [-455 -729 728] [-390 675 -793] [-474 -580 667] [618 824 -621] [876 -649 763] [689 -845 -530] [-443 -580 662] [789 -900 -551] [-528 643 409] [584 -868 -557] [537 823 -458] [-7 33 -71]} #{[816 -661 -575] [643 528 409] [-649 -876 763] [-580 443 662] [-580 474 667] [-524 -892 684] [588 404 -901] [627 544 -890] [311 -345 381] [-845 -689 -530] [-392 564 -477] [357 -485 347] [824 -618 -621] [-900 -789 -551] [701 423 434] [-345 553 -567] [707 459 401] [-729 455 728] [823 -537 -458] [675 390 -793] [33 7 -71] [-868 -584 -557] [329 -447 318] [-319 630 -379] [-591 -838 734]} #{[-789 -900 551] [7 33 71] [-838 -591 -734] [553 -345 567] [-447 329 -318] [-485 357 -347] [443 -580 -662] [404 588 901] [-584 -868 557] [-689 -845 530] [-618 824 621] [-537 823 458] [423 701 -434] [-345 311 -381] [-892 -524 -684] [528 643 -409] [474 -580 -667] [455 -729 -728] [390 675 793] [630 -319 379] [459 707 -401] [-661 816 575] [544 627 890] [-876 -649 -763] [564 -392 477]} #{[-311 -345 -381] [-643 528 -409] [580 443 -662] [-627 544 890] [580 474 -667] [524 -892 -684] [868 -584 557] [-329 -447 -318] [319 630 379] [649 -876 -763] [-588 404 901] [392 564 477] [-707 459 -401] [-675 390 793] [-33 7 71] [729 455 -728] [900 -789 551] [345 553 567] [591 -838 -734] [-357 -485 -347] [845 -689 530] [-816 -661 575] [-701 423 -434] [-823 -537 458] [-824 -618 621]} #{[-423 -701 -434] [-553 345 567] [485 -357 -347] [-455 729 -728] [-7 -33 71] [-390 -675 793] [-544 -627 890] [-528 -643 -409] [447 -329 -318] [-630 319 379] [618 -824 621] [876 649 -763] [-404 -588 901] [-474 580 -667] [892 524 -684] [661 -816 575] [584 868 557] [789 900 551] [-564 392 477] [537 -823 458] [-459 -707 -401] [-443 580 -662] [345 -311 -381] [838 591 -734] [689 845 530]} #{[823 537 458] [-845 689 530] [-524 892 -684] [329 447 -318] [-649 876 -763] [-591 838 -734] [824 618 621] [675 -390 793] [643 -528 -409] [816 661 575] [588 -404 901] [701 -423 -434] [-580 -474 -667] [-580 -443 -662] [-868 584 557] [-900 789 551] [-392 -564 477] [311 345 -381] [-729 -455 -728] [-319 -630 379] [707 -459 -401] [33 -7 71] [627 -544 890] [-345 -553 567] [357 485 -347]} #{[-707 401 459] [-701 434 423] [-816 -575 -661] [392 -477 564] [845 -530 -689] [-824 -621 -618] [-588 -901 404] [524 684 -892] [319 -379 630] [-357 347 -485] [-311 381 -345] [649 763 -876] [868 -557 -584] [900 -551 -789] [-675 -793 390] [-627 -890 544] [580 662 443] [591 734 -838] [-643 409 528] [345 -567 553] [729 728 455] [-33 -71 7] [580 667 474] [-823 -458 -537] [-329 318 -447]} #{[684 -524 -892] [-557 -868 -584] [401 707 459] [728 -729 455] [-890 627 544] [-621 824 -618] [763 -649 -876] [347 357 -485] [381 311 -345] [662 -580 443] [-567 -345 553] [667 -580 474] [-458 823 -537] [-477 -392 564] [434 701 423] [-575 816 -661] [318 329 -447] [-379 -319 630] [-551 -900 -789] [734 -591 -838] [-901 588 404] [409 643 528] [-530 -845 -689] [-793 675 390] [-71 33 7]} #{[-319 379 630] [-524 -684 -892] [311 -381 -345] [33 71 7] [-580 -662 443] [-580 -667 474] [329 -318 -447] [-845 530 -689] [-392 477 564] [627 890 544] [823 458 -537] [-900 551 -789] [-868 557 -584] [588 901 404] [707 -401 459] [-649 -763 -876] [824 621 -618] [-729 -728 455] [357 -347 -485] [816 575 -661] [675 793 390] [-591 -734 -838] [643 -409 528] [701 -434 423] [-345 567 553]} #{[379 319 630] [890 -627 544] [-318 -329 -447] [567 345 553] [458 -823 -537] [530 845 -689] [-409 -643 528] [-734 591 -838] [793 -675 390] [557 868 -584] [551 900 -789] [477 392 564] [71 -33 7] [-667 580 474] [-662 580 443] [901 -588 404] [-684 524 -892] [575 -816 -661] [-434 -701 423] [-763 649 -876] [-347 -357 -485] [-728 729 455] [-401 -707 459] [-381 -311 -345] [621 -824 -618]} #{[-588 901 -404] [-823 458 537] [-627 890 -544] [-701 -434 -423] [729 -728 -455] [524 -684 892] [-643 -409 -528] [649 -763 876] [580 -662 -443] [591 -734 838] [-675 793 -390] [-329 -318 447] [-357 -347 485] [392 477 -564] [580 -667 -474] [345 567 -553] [-824 621 618] [-816 575 661] [319 379 -630] [900 551 789] [845 530 689] [-33 71 -7] [-311 -381 345] [868 557 584] [-707 -401 -459]} #{[347 -357 485] [-458 -823 537] [-530 845 689] [728 729 -455] [-477 392 -564] [-575 -816 661] [-793 -675 -390] [763 649 876] [-71 -33 -7] [381 -311 345] [-557 868 584] [-901 -588 -404] [662 580 -443] [-890 -627 -544] [401 -707 -459] [-551 900 789] [409 -643 -528] [-379 319 -630] [434 -701 -423] [734 591 838] [318 -329 447] [-621 -824 618] [684 524 892] [-567 345 -553] [667 580 -474]} #{[588 -901 -404] [-580 667 -474] [-845 -530 689] [-580 662 -443] [-591 734 838] [816 -575 661] [-900 -551 789] [627 -890 -544] [701 434 -423] [-345 -567 -553] [643 409 -528] [675 -793 -390] [824 -621 618] [707 401 -459] [-392 -477 -564] [-868 -557 584] [357 347 485] [329 318 447] [33 -71 -7] [823 -458 537] [-729 728 -455] [311 381 345] [-319 -379 -630] [-649 763 876] [-524 684 892]} #{[-401 707 -459] [-728 -729 -455] [-381 311 345] [530 -845 689] [71 33 -7] [-763 -649 876] [-318 329 447] [575 816 661] [551 -900 789] [-667 -580 -474] [-734 -591 838] [477 -392 -564] [458 823 537] [-684 -524 892] [890 627 -544] [567 -345 -553] [621 824 618] [901 588 -404] [379 -319 -630] [-434 701 -423] [-409 643 -528] [-347 357 485] [-662 -580 -443] [793 675 -390] [557 -868 584]} #{[734 -838 591] [-567 553 345] [763 -876 649] [-575 -661 -816] [-71 7 -33] [347 -485 -357] [684 -892 524] [667 474 580] [-458 -537 -823] [-551 -789 900] [401 459 -707] [318 -447 -329] [-379 630 319] [-477 564 392] [-890 544 -627] [409 528 -643] [-557 -584 868] [-621 -618 -824] [728 455 729] [-901 404 -588] [662 443 580] [434 423 -701] [381 -345 -311] [-793 390 -675] [-530 -689 845]} #{[-345 -381 -311] [544 890 -627] [-789 551 900] [-892 -684 524] [404 901 -588] [553 567 345] [7 71 -33] [-584 557 868] [-618 621 -824] [-876 -763 649] [-537 458 -823] [-485 -347 -357] [474 -667 580] [630 379 319] [443 -662 580] [-689 530 845] [-838 -734 591] [-661 575 -816] [-447 -318 -329] [564 477 392] [459 -401 -707] [390 793 -675] [528 -409 -643] [455 -728 729] [423 -434 -701]} #{[575 661 -816] [890 -544 -627] [71 -7 -33] [901 -404 -588] [379 -630 319] [477 -564 392] [-728 -455 729] [-409 -528 -643] [-684 892 524] [551 789 900] [-662 -443 580] [-667 -474 580] [-318 447 -329] [793 -390 -675] [-763 876 649] [621 618 -824] [530 689 845] [-401 -459 -707] [-734 838 591] [557 584 868] [-347 485 -357] [458 537 -823] [-381 345 -311] [567 -553 345] [-434 -423 -701]} #{[838 734 591] [447 318 -329] [-404 -901 -588] [345 381 -311] [661 -575 -816] [-564 -477 392] [-7 -71 -33] [-443 662 580] [-455 728 729] [-390 -793 -675] [689 -530 845] [789 -551 900] [618 -621 -824] [-459 401 -707] [-544 -890 -627] [892 684 524] [-474 667 580] [485 347 -357] [537 -458 -823] [-423 434 -701] [-553 -567 345] [-528 409 -643] [876 763 649] [584 -557 868] [-630 -379 319]} #{[-379 -630 -319] [434 -423 701] [-477 -564 -392] [-890 -544 627] [-901 -404 588] [409 -528 643] [-567 -553 -345] [-458 537 823] [-551 789 -900] [-530 689 -845] [381 345 311] [684 892 -524] [347 485 357] [667 -474 -580] [728 -455 -729] [734 838 -591] [662 -443 -580] [318 447 329] [-71 -7 33] [-621 618 824] [763 876 -649] [-557 584 -868] [-793 -390 675] [-575 661 816] [401 -459 707]} #{[423 434 701] [553 -567 -345] [-485 347 357] [564 -477 -392] [-618 -621 824] [455 728 -729] [-345 381 311] [390 -793 675] [443 662 -580] [459 401 707] [7 -71 33] [-661 -575 816] [-892 684 -524] [-876 763 -649] [-447 318 329] [-584 -557 -868] [528 409 643] [404 -901 588] [-789 -551 -900] [474 667 -580] [-838 734 -591] [630 -379 -319] [-537 -458 823] [-689 -530 -845] [544 -890 627]} #{[575 -661 816] [-381 -345 311] [793 390 675] [379 630 -319] [-763 -876 -649] [-409 528 643] [-434 423 701] [530 -689 -845] [-684 -892 -524] [901 404 588] [-318 -447 329] [71 7 33] [-728 455 -729] [458 -537 823] [551 -789 -900] [477 564 -392] [567 553 -345] [-734 -838 -591] [890 544 627] [-401 459 707] [-347 -485 357] [-662 443 -580] [621 -618 824] [-667 474 -580] [557 -584 -868]} #{[-404 901 588] [689 530 -845] [-553 567 -345] [-443 -662 -580] [584 557 -868] [485 -347 357] [-423 -434 701] [-528 -409 643] [-564 477 -392] [-390 793 675] [-630 379 -319] [892 -684 -524] [618 621 824] [876 -763 -649] [-455 -728 -729] [838 -734 -591] [661 575 816] [345 -381 311] [447 -318 329] [789 551 -900] [-474 -667 -580] [537 458 823] [-459 -401 707] [-544 890 627] [-7 71 33]}]

  (overlapping-orientation (first input-test) (second input-test))
  ;; => [(68 -1246 -43) #{[-567 -361 -727] [-729 430 -532] [-703 -491 529] [466 -666 811] [460 603 452] [500 -761 -534] [-807 -499 711] [-95 138 -22] [-413 935 424] [429 -592 -574] [-686 422 -578] [-586 -435 -557] [-515 917 361] [-669 -402 -600] [-755 -354 619] [-553 889 390] [364 -763 893] [355 545 477] [336 658 -858] [328 -685 -520] [340 -569 846] [322 571 -750] [-605 423 -415] [391 539 444] [476 619 -847]}]


  (for [b (orientation->points-set (second input-test))]
    (shift-for-overlap 12 (set (first input-test)) b))
  ;; => (nil nil nil nil nil nil (68 -1246 -43) nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)

  (overlay-scanners input-test)
  ;; => #{[455 729 728] [-706 -3180 -659] [-618 -824 -621] [776 -3184 -501] [-612 -1695 1788] [630 319 -379] [-789 900 -551] [377 -2827 367] [-532 -1715 1894] [-876 649 763] [7 -33 -71] [-631 -672 1502] [564 392 -477] [-27 -1108 -65] [-661 -816 -575] [1776 -675 371] [-470 -3283 303] [346 -2985 342] [-654 -3158 -753] [-584 868 -557] [408 -1815 803] [390 -675 -793] [1693 -557 386] [-620 -3212 371] [-518 -1681 -600] [-345 -311 381] [612 -1593 1893] [605 -1665 1952] [404 -588 -901] [-892 524 684] [1786 -1538 337] [846 -3110 -434] [-687 -1600 576] [1135 -1161 1235] [432 -2009 850] [1772 -405 1572] [443 580 662] [-739 -1745 668] [1779 -442 1789] [1889 -1729 1762] [1749 -1800 1813] [553 345 -567] [366 -3059 397] [527 -524 1933] [-413 -627 1469] [1735 -437 1738] [528 -643 409] [396 -1931 -563] [-537 -823 -458] [-635 -1737 486] [-499 -1607 -770] [568 -2007 -577] [1994 -1805 1792] [474 580 667] [-36 -1284 1171] [1780 -1548 337] [686 -3108 -505] [-485 -357 347] [496 -1584 1900] [534 -1912 768] [423 -701 434] [497 -1838 -617] [465 -695 1988] [-456 -621 1527] [459 -707 401] [-430 -3130 366] [-697 -3072 -689] [12 -2351 -103] [-689 845 -530] [1847 -1591 415] [1243 -1093 1063] [456 -540 1869] [-601 -1648 -643] [544 -627 -890] [-838 591 734] [-624 -1620 1868] [-447 -329 318] [1660 -552 429] [26 -1119 1091]}

  (part1 input-test)
  ;; => 79

  (part1 input1)
  ;; => 454

  (part2 input-test)
  ;; => 3621

  (part2 input1)
  ;; => 10813
  )
